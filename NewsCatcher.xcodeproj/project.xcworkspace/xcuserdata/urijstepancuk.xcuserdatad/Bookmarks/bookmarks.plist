<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>children</key>
			<array>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>135</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>134</string>
							<key>Timestamp</key>
							<string>720129889.462539</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>NewsCatcher/Modules/Feed/FeedView/FeedViewController.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>            UIView.animate(withDuration: 0.3) { // TODO: Check Probably it's no needed
</string>
						<key>leading</key>
						<string>    func stopRefreshControlAnimation() {
        if let refreshControl = feedView.tableView.refreshControl, refreshControl.isRefreshing {
</string>
						<key>trailing</key>
						<string>                refreshControl.endRefreshing()
            }
        }
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>62</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>61</string>
							<key>Timestamp</key>
							<string>720434839.4895999</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>NewsCatcher/Modules/Article/ArticlePresenter.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>        // TODO: Create error handling cases
</string>
						<key>leading</key>
						<string>
    private func handleError(_ error: NetworkError) {
</string>
						<key>trailing</key>
						<string>        switch error {
        default:
            debugPrint(error.localizedDescription)
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
				<dict>
					<key>destination</key>
					<dict>
						<key>location-parameters</key>
						<dict>
							<key>EndingColumnNumber</key>
							<string>0</string>
							<key>EndingLineNumber</key>
							<string>118</string>
							<key>StartingColumnNumber</key>
							<string>0</string>
							<key>StartingLineNumber</key>
							<string>117</string>
							<key>Timestamp</key>
							<string>720129533.494805</string>
						</dict>
						<key>rebasable-url</key>
						<dict>
							<key>base</key>
							<string>workspace</string>
							<key>payload</key>
							<dict>
								<key>relative-path</key>
								<string>NewsCatcher/Modules/Feed/FeedPresenter.swift</string>
							</dict>
						</dict>
					</dict>
					<key>text-context</key>
					<dict>
						<key>focused</key>
						<string>                    // TODO: Optional: Change it from alert to view with text in the center instead of FeedTable
</string>
						<key>leading</key>
						<string>            case let .success(news):
                if news.isEmpty {
</string>
						<key>trailing</key>
						<string>                    view?.showAlertWithTitle(Constants.alertTitleNoArticlesFound, text: Constants.alertTextNoArticlesFound)
                } else {
                    state.setupNews(with: news)
</string>
					</dict>
					<key>type</key>
					<string>bookmark</string>
				</dict>
			</array>
			<key>title</key>
			<string>TODOs</string>
			<key>type</key>
			<string>group</string>
		</dict>
	</array>
</dict>
</plist>
